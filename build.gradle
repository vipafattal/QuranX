// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        androidTargetVersion = '30'

        //Kotlin
        kotlin_version = '1.6.0'
        serializtion_version = '1.2.2'
        koin_version = "3.1.2"
        coroutines_version = "1.5.2"
        ktx_version = "1.7.0"
        dokka_version = "1.5.0"
        //Android Frameworks
        support_version = '1.3.1'
        material_version = '1.4.0'
        recycler_version = '1.2.0-rc01'
        constraint_version = '2.1.0'
        preference_version = "1.1.1"
        swip_to_refresh = "1.1.0"

        //Retrofit + OkHttp logger
        retrofit_version = '2.9.0'
        retrofitCoroutins_version = "0.9.2"
        okhttpLoggingInterceptorVersion = '5.0.0-alpha.2'
        activity_version = "1.3.1"

        //Architecture component
        room_version = "2.4.0"
        lifecycle_version = '2.3.1'
        nav_version = "2.3.5"

        //Others
        lottie_version = '4.1.0'
        scalablePiexl_version = '1.0.6'

        startup = "androidx.startup:startup-runtime:1.1.0"

        kt = [
                core         : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
                serialization: "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializtion_version",
                ktx          : "androidx.core:core-ktx:$ktx_version"
        ]

        androidm = [
                appcompat       : "androidx.appcompat:appcompat:$support_version",
                recyclerview    : "androidx.recyclerview:recyclerview:$recycler_version",
                material        : "com.google.android.material:material:$material_version",
                constraintlayout: "androidx.constraintlayout:constraintlayout:$constraint_version",
                preference      : "androidx.preference:preference-ktx:$preference_version",
                refresher       : "androidx.swiperefreshlayout:swiperefreshlayout:$swip_to_refresh"

        ]

        koin = [
                core   : "io.insert-koin:koin-core:$koin_version",
                android: "io.insert-koin:koin-android:$koin_version",
        ]

        coroutines = [
                core       : "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version",
                android    : "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version",
        ]

        retrofit = [
                core       : "com.squareup.retrofit2:retrofit:$retrofit_version",
                converter  : "com.squareup.retrofit2:converter-gson:$retrofit_version",
                interceptor: "com.squareup.okhttp3:logging-interceptor:$okhttpLoggingInterceptorVersion"
        ]

        lifecycle = [
                viewmodel: "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version",
                runtime  : "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version",
                livedata : "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
        ]


        roomDB = [
                core: "androidx.room:room-runtime:$room_version",
                ktx : "androidx.room:room-ktx:$room_version",
                kapt: "androidx.room:room-compiler:$room_version"
        ]

        tests = [
                truth        : 'androidx.test.ext:truth:1.4.0',
                junit        : 'junit:junit:4.13.2',
                ext_junit    : 'androidx.test.ext:junit:1.1.3',
                espresso_core: 'androidx.test.espresso:espresso-core:3.4.0',
        ]

        frameworks = [
                lottie: "com.airbnb.android:lottie:$lottie_version",
                sdp   : "com.intuit.sdp:sdp-android:$scalablePiexl_version",
                ssp   : "com.intuit.ssp:ssp-android:$scalablePiexl_version",
                flex  : 'com.google.android.flexbox:flexbox:3.0.0',
                gson  : 'com.google.code.gson:gson:2.8.6'
        ]

        navigation = [
                fragment: "androidx.navigation:navigation-fragment-ktx:$nav_version",
                ui      : "androidx.navigation:navigation-ui-ktx:$nav_version"
        ]

        agp_version = '7.0.4'
    }

    repositories {
        google()
        mavenCentral()
        // For Dokka that depends on kotlinx-html
        maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }

    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}


subprojects {

    // dokka and version configuration.
    afterEvaluate {
        if (tasks.findByName('dokkaHtmlPartial') == null) {
            // If dokka isn't enabled on this module, skip
            return
        }
        apply plugin: 'org.jetbrains.dokka'

        tasks.named('dokkaHtmlPartial') {
            //outputDirectory = file("${rootProject.rootDir}/docs/${displayName.replaceAll("project|:|'",'')}")
            // Do not create index pages for empty packages
            dokkaSourceSets {

                configureEach {
                    includes.from(rootProject.file('dokka/modules.md').path)

                    //displayName.set(project.name[0].toUpperCase()+project.name.substring(1))

                    perPackageOption {
                        skipDeprecated.set(false)
                        skipEmptyPackages.set(true)
                    }
                    // Suppress a package
                    perPackageOption {
                        //matchingRegex.set(".*\\.internal.*") // will match all .internal packages and sub-packages
                        suppress.set(true)
                    }
                    reportUndocumented.set(true)
                    skipEmptyPackages.set(true)
                    skipDeprecated.set(true)
                    jdkVersion.set(8)

                    // Add Android SDK packages
                    noAndroidSdkLink.set(false)

                    // Add sample from :sample module
                    samples.from(rootProject.file("sample/src/main/java/"))


                    externalDocumentationLink {
                        url.set(new URL("https://developer.android.com/reference/"))
                        packageListUrl.set(new URL("https://developer.android.com/reference/androidx/package-list"))
                    }
                    externalDocumentationLink {
                        url.set(new URL("https://developer.android.com/reference/kotlin/"))
                        packageListUrl.set(new URL("https://developer.android.com/reference/kotlin/androidx/package-list"))
                    }

                    sourceLink {
                        localDirectory.set(project.file("src/main/java"))
                        // URL showing where the source code can be accessed through the web browser
                        remoteUrl.set(new URL("https://github.com/vipafattal/QuranX/blob/master/${project.name}/src/main/java"))
                        // Suffix which is used to append the line number to the URL. Use #L for GitHub
                        remoteLineSuffix.set("#L")
                    }
                }
            }
        }
    }
}

apply plugin: 'org.jetbrains.dokka'

tasks.dokkaHtmlMultiModule.configure {
    // Used to prevent resolving package-lists online. When this option is set to true, only local files are resolved
    outputDirectory = new File("${project.rootDir}/docs")
    includes.from(rootProject.file('dokka/root.md').path)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}